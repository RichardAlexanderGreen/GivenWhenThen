TestCase subclass: #GivenWhenThen	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GivenWhenThen'!!GivenWhenThen methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/8/2012 15:51'!given: givenBlock when: whenBlock then: thenBlock	"Implement simple BDD Given []: When: [] Then: [] "	|  |	givenBlock value.	whenBlock value.	self assert: thenBlock value.! !GivenWhenThen subclass: #GivenWhenThenTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GivenWhenThen'!!GivenWhenThenTest methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/8/2012 16:21'!test01SimpleHappyPath	"Given: a = 2, b = 3; when:  c := a + b, then: c == 5"	| a b c |	self given: [ a := 2. b:= 3.] when: [ c := a + b] then: [ c == 5 ].! !!GivenWhenThenTest methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/8/2012 16:21'!test02GivenFails	"Let's see how it behaves when the Given block has an undefined call."	| test |	test := false.	test ifFalse: [ Transcript cr; show: 'test02GivenFails is turned off'; cr.  ^self ].				self given: [ self undefinedMethodCall ] when: [ self fail ] then: [ false ]. 	! !!GivenWhenThenTest methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/10/2012 15:30'!test03WhenFails	"See how test behaves when the When-clause has undefined call in it."	| test |	test := false.	test ifFalse: [ Transcript cr; show: 'test03WhenFails is turned off'; cr.  ^self. ].		self given: [ nil ] when: [ self undefinedMethodCall ] then: [ false ].			! !TestCase subclass: #EstimateTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'GivenWhenThen'!!EstimateTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/10/2012 15:58'!test01EstimateHasPMO	"Story: An estimate's distribution is characterized by pessmistic, most-likely,  optimistic values "	| estimate |	"Define the estimate's parameters."	"Early estimates tend to be spread by a factor of 2."	estimate := Estimate new.	estimate pessimistic: 200.	estimate mostLikely: 100.	estimate optimistic: 50.		"Story: As an estimation tool, I want to view the distribution parameters. "	self assert: ( estimate pessimistic = 200 ).	self assert: ( estimate mostLikely = 100 ).	self assert: ( estimate optimistic = 50 ).				! !!EstimateTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/10/2012 16:05'!test02EstimateHasMean	"The mean  value for an estimate is (p + 4*m + o) / 6."	| estimate mean |	"Given: An estimate with pessmistic = 200, most likely = 100, optimistic = 50."	estimate := Estimate new.	estimate pessimistic: 200.	estimate mostLikely: 100.	estimate optimistic: 50.		"When: We calculate the mean,  Then: We get (50 + 4*100 + 200)/ 6 ==> 650/6 = 108.333"		mean :=  estimate mean.	self assert: ( mean = ( 650 / 6 ) ).	self assert: ( mean > 108.33 ).	self assert: ( mean < 108.34 ).	! !!EstimateTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/10/2012 16:12'!test03EstimateHasVariance	"The variance for an estimate is  ( o - p ) / 6 squared"	| estimate variance |	"Given: An estimate with pessmistic = 200, most likely = 100, optimistic = 50."	estimate := Estimate new.	estimate pessimistic: 200.	estimate mostLikely: 100.	estimate optimistic: 50.		"When: We calculate the variance,  Then: We get square of ( pessimistic - optimistic ) / 6 ==>  ( 150/6) **2 "		variance :=  estimate variance.	self assert: ( variance = (( 150 / 6 ) * ( 150 / 6 )) ).		! !!EstimateTests methodsFor: 'as yet unclassified' stamp: 'RichardAlexanderGreen 5/10/2012 22:17'!test04EstimatePlusEstimate	"Story: When you add estimates the result sums the most-likely values and also sums the variance."	| estimateA estimateB estimateC expected |	"Given: Two estimates with pessmistic = 200, most likely = 100, optimistic = 50."	estimateA := Estimate new.	estimateA pessimistic: 200.	estimateA mostLikely: 100.	estimateA optimistic: 50.		estimateB := Estimate new.	estimateB pessimistic: 200.	estimateB mostLikely: 100.	estimateB optimistic: 50.		"When we add them together . . ."	estimateC := estimateA plus: estimateB.		"Then the result has double the most-likely"	self assert: ( estimateC mostLikely = ( estimateA mostLikely + estimateB mostLikely  )  ).		"Then the result's variance is the sum of the operand's variances."	self assert: ( estimateC variance = ( estimateA variance + estimateB variance )  ).		"Then the result's optimistic value is for a Z of minus one (one standard deviantion below"	expected :=  ( estimateC mostLikely -  ( estimateC standardDeviation )  ).	self assert: ( estimateC optimistic =  expected ).		"Then the result's pessimistic value is for a Z of plus one (one standard deviantion below"	expected :=  ( estimateC mostLikely + ( estimateC standardDeviation )  ).	self assert: ( estimateC pessimistic  =  expected ).						! !Number subclass: #Estimate	instanceVariableNames: 'optimistic mostLikely pessimistic variance'	classVariableNames: ''	poolDictionaries: ''	category: 'GivenWhenThen'!!Estimate methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 5/10/2012 15:48'!mostLikely	^ mostLikely ifNil: [ Error signal: 'Estimate has not been initialized properly.' ].! !!Estimate methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 5/10/2012 15:51'!mostLikely: aNumber	"What is the mode / most  likely value?"	mostLikely := aNumber.! !!Estimate methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 5/10/2012 15:47'!optimistic	^ optimistic ifNil: [ Error signal: 'Estimate has not been initialized properly. '].! !!Estimate methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 5/10/2012 15:43'!optimistic: aNumber 	optimistic := aNumber.! !!Estimate methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 5/10/2012 15:49'!pessimistic	^ pessimistic ifNil: [ Error signal: 'Estimate has not bee initialized properly.' ].! !!Estimate methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 5/10/2012 15:46'!pessimistic: aNumber	"What is the pessimistic (roughly 85 percentile) value of the estimate?"	pessimistic := aNumber.! !!Estimate methodsFor: 'accessing' stamp: 'RichardAlexanderGreen 5/10/2012 22:01'!variance: aNumber 	variance := aNumber.! !!Estimate methodsFor: 'self evaluating' stamp: 'RichardAlexanderGreen 5/10/2012 16:16'!mean	"Calculate the mean (expected value)  for the distribution."	| mean |	mean := ( optimistic + ( 4 * mostLikely ) + pessimistic ) / 6.	^ mean.! !!Estimate methodsFor: 'self evaluating' stamp: 'RichardAlexanderGreen 5/10/2012 22:44'!standardDeviation	"The standard deviation is the positive sqare root of the variance. (The variance is the deviation squared.)"	| deviation  |	deviation := variance sqrt.	^deviation.! !!Estimate methodsFor: 'self evaluating' stamp: 'RichardAlexanderGreen 5/10/2012 22:02'!variance	| deviation  |	variance ifNotNil: [ ^variance ].	deviation := ( pessimistic - optimistic ) / 6.	variance := deviation * deviation.	^variance.! !!Estimate methodsFor: 'arithmetic' stamp: 'RichardAlexanderGreen 5/10/2012 22:17'!plus: otherEstimate 	| result deviation |	result := Estimate new.	result mostLikely:  ( self mostLikely + otherEstimate mostLikely ).	result variance: ( self variance + otherEstimate variance ).	deviation := result standardDeviation.	result optimistic: ( result mostLikely - deviation ). 	result pessimistic: ( result mostLikely + deviation ).			^result.! !